* Work notes

Here we do the actual work.

** Renat
*** Brainstorm/Braindump
    - The final task is to have an article offering an opinionated
      list of building blocks implementing CODE methodology.

    - I want to concentrate on
      - Search
      - Highlighting
      - Summarization

    - We may want to make a set of videos/gifs demonstrating workflow
      with our instrument.

    - Don't hesitate to use brute force

*** Useful links
A list of useful packages for implementing CODE with Emacs.

- [[https://github.com/logseq/logseq][GitHub - logseq/logseq: A privacy-first, open-source(frontend now, backend later) platform for knowledge management and collaboration. Desktop app download link: https://github.com/logseq/logseq/releases, roadmap: https://trello.com/b/8txSM12G/roadmap]]

- [[https://www.emacswiki.org/emacs/HighlightLibrary][EmacsWiki: Highlight Library]]
  Highlight the text.

- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Enriched-Text.html][Emacs Enriched Text mode]]
  Persistently store highlights and Emacs markup in text files.

- [[https://pandoc.org/][Pandoc - About pandoc]]
  Transform various documents to org-mode format.

- A miro board of basb course
  [[https://miro.com/app/board/o9J_lEwGSa8=/][Board]]

- Org pandoc import
  https://github.com/tecosaur/org-pandoc-import

*** Keywords
- CODE

  - [[file:20210530130904-divergence_convergence.org::*Divergence and convergence][Divergence and convergence]]
- Search
  - [[file:~/Dropbox/org/index.org::*Read http://www.paulgraham.com/startupideas.html][Read http://www.paulgraham.com/startupideas.html]]
  - [[file:20210505083712-code_methodology.org::+title: CODE methodology][CODE methodology]]
  - [[file:20210328000412-zettlkasten.org::*Zettelkasten][Zettelkasten]]
- Highlight
  - [[file:~/Dropbox/org/index.org::*A reader, that doesn't allow you to read until you make notes.][A reader, that doesn't allow you to read until you make notes.]]

*** Capture

    Web-pages
    - pandoc

    Images
    - test google cloud vision api
    - rekognition api
      I ended up using rekognition API

      You need amazon account to use it.
      #+caption: Rekognition script
      #+begin_src bash
        #!/bin/bash

        set -euo pipefail

        CREDENTIALS="$1"
        TARGET_BASENAME="$(basename "$2")"

        docker run --user "$(id -u):$(id -g)" -v /home/renat/.aws:/tmp/.aws -e HOME=/tmp -v "$(realpath "$2"):/mnt/$TARGET_BASENAME" -w /mnt --rm -i amazon/aws-cli --profile "$CREDENTIALS" rekognition detect-labels --image-bytes "fileb://$TARGET_BASENAME"
      #+end_src

**** Use pandoc to convert documents to org-mode format

     I don't trust browser extenstions, so I capture web pages in a different way:

     Whenever I find something worth reading, I open it with Firefoxes
     built-in page cleaner [fn:1] and just save the HTML page into my
     org archive[fn:2].

     Then I use [[https://pandoc.org/][pandoc]] to convert the page I saved into org-mode format.

     #+begin_src bash
       cd ~/Dropbox/org/html
       pandoc -f html -t org <file name>.html -o <file name>.org
     #+end_src

     Then, if I don't read the article immediately, I store a link
     with [[https://orgmode.org/manual/Handling-Links.html][org-store-link]] and put it into appropriate resource, area or
     project file.



**** highlighting

      To keep track of important stuff inside the file I highlight the
      text I selected with =highlight.el=.

      Use different colors for different highlights.
      When I'm reading, I try to keep track of statements and questions
      I'm interested in. The code below defines appropriate faces.

      #+caption: Custom highlights
      #+begin_src elisp :tangle ~/emacs/rc/CODE.el
        (defface highlight-question
          '((((class color) (min-colors 88) (background light))
             :background "darkseagreen2")
            (((class color) (min-colors 88) (background dark))
             :background "darkolivegreen")
            (((class color) (min-colors 16) (background light))
             :background "darkseagreen2")
            (((class color) (min-colors 16) (background dark))
             :background "darkolivegreen")
            (((class color) (min-colors 8))
             :background "green" :foreground "black")
            (t :inverse-video t))
          "Face for highlighting questions."
          :group 'basic-faces)

        (defface highlight-statement
          '((((class color) (min-colors 88) (background light))
             :background "#3c4c7a")
            (((class color) (min-colors 88) (background dark))
             :background "#3c4c7a")
            (((class color) (min-colors 16) (background light))
             :background "#3c4c7a")
            (((class color) (min-colors 16) (background dark))
             :background "#3c4c7a")
            (((class color) (min-colors 8))
             :background "blue" :foreground "black")
            (t :inverse-video t))
          "Face for highlighting statements."
          :group 'basic-faces)

        (defface highlight-general
          '((((class color) (min-colors 88) (background light))
             :background "#614b61")
            (((class color) (min-colors 88) (background dark))
             :background "#614b61")
            (((class color) (min-colors 16) (background light))
             :background "#614b61")
            (((class color) (min-colors 16) (background dark))
             :background "#614b61")
            (((class color) (min-colors 8))
             :background "red" :foreground "black")
            (t :inverse-video t))
          "Face for highlighting."
          :group 'basic-faces)
      #+end_src

      Helper functions and their keybindings so we can mark text
      quickly. I use =ESC ESC h= prefix. Feel free to use your own.

      #+begin_src elisp :tangle ~/emacs/rc/CODE.el
        (defun hlt-question()
          (interactive)
          (hlt-highlight-region (region-beginning) (region-end) 'highlight-question))

        (defun hlt-statement()
          (interactive)
          (hlt-highlight-region (region-beginning) (region-end) 'highlight-statement))


        (global-set-key (kbd "ESC M-h q") #'hlt-question)
        (global-set-key (kbd "ESC M-h s") #'hlt-statement)
        (global-set-key (kbd "ESC M-h h") #'hlt-general)
        (global-set-key (kbd "ESC M-h u") #'hlt-unhighlight-region)
      #+end_src

**** Twelve favourite problems
     :LOGBOOK:
     CLOCK: [2021-06-16 Wed 04:25]--[2021-06-16 Wed 04:27] =>  0:02
     :END:

     Them aim here is to extract projects/areas/resources I spent the most time in.
**** Capture templates
***** Project

            This template will create a project entry and will ask you to set a deadline.
       #+caption: Capture project template
       #+name: roam-capture-project
       #+begin_src emacs-lisp
         (add-to-list
          'org-roam-capture-templates
          ("p" "Project" plain "%?"
           :if-new (file+head "roam/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+roam_tags project\n\n* ${title}\n  :DEADLINE: %^{Project deadline}t\n\n")
           :unnarrowed t))
       #+end_src

*** Organize

    Tagging your notes as PARA objects.

    I have two approaches to manage projects, areas and resource tags:
    by roam tags and by roam links.

**** Tags

     For every note you assign an appropriate tag with
     =org-roam-tag-add=.

     Then you can see all of your projects for example just by
     searching by project tag.


     On roam v2 it will look like.

     #+DOWNLOADED: screenshot @ 2021-06-09 09:16:32
     #+attr_org: :width 400px
     [[file:Working_notes/2021-06-09_09-16-32_screenshot.png]]

**** Roam linkns

     You create roam fiels named =Project=, =Area=, =Resource= and
     then put it into a roam entry as a link.

     Then, you open the =Areas= note and in your org-roam buffer you
     will see:

     #+DOWNLOADED: screenshot @ 2021-06-09 09:20:55
     #+attr_org: :width 400px
     [[file:Working_notes/2021-06-09_09-20-55_screenshot.png]]

* Footnotes

[fn:1]
[[https://support.mozilla.org/en-US/kb/firefox-reader-view-clutter-free-web-pages][Reader view]]
#+attr_html: :width 400px
[[file:Footnotes/2021-06-16_04-30-55_screenshot.png]]

[fn:2]
https://support.mozilla.org/en-US/kb/how-save-web-page
